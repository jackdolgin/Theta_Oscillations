{
    "name": "Rhythms in Internal and External Attentional Focus: Replicating Oscillations in Two-Object, External Attention Task",
    "info": {
        "author": [
            "Jack Dolgin",
            "Ian C. Fiebelkorn",
            "Tobias Egner"
        ]
    },
    "hypotheses": [
        {
            "id": "hypothesis",
            "description": "Accuracy during invalid trials will oscillate significantly only at 4 Hz., though accounting for multiple comparisons we will test frequencies 3-8 Hz. We will keep running participants until there are 30 usable, complete data sets.",
            "criteria": [],
            "evaluation": "&"
        }
    ],
    "methods": [],
    "data": [],
    "prep": [],
    "analyses": [
        {
            "id": "analyses",
            "func": "main_function",
            "params": {
                "averaging": "Aggregate",
                "visualize": "Aggregate",
                "batch": "4a",
                "wm_exp": false,
                "iso_sides": false,
                "sbtr": false,
                "samp_per": 0.05,
                "clumps": 0,
                "dep_var": "Accuracy",
                "α": 0.05,
                "shuff": 50000,
                "mult_correcs": "BH",
                "trends": [
                    "Detrending",
                    "Demeaning"
                ],
                "smooth_method": "Loess",
                "show_CI": true,
                "display": [
                    "time_series",
                    "FFT"
                ],
                "win_func": "Tukey",
                "xrange": [3, 8],
                "duration": 1,
                "attn_filter": false,
                "catch_floor": 0.85,
                "side_bias": 0.5,
                "wm_floor": 0.7,
                "invalid_floor": 0.02,
                "pre_range": [0.25, 0.85],
                "post_range": [0.25, 0.85],
                "filtered_cap": 0.5,
                "block_range": [0.2, 0.8],
                "blocks_desired": [1, 2, 3, 4, 5, 6, 7, 8],
                "miniblock_range": [0.2, 0.8],
                "CTI_range": [0.3, 1.09]
            },
            "code": [
                "function (averaging, visualize, batch, wm_exp, iso_sides, sbtr, ",
                "    samp_per, clumps, dep_var, α, shuff, mult_correcs, trends, ",
                "    smooth_method, show_CI, display, win_func, xrange, duration, ",
                "    attn_filter, catch_floor, side_bias, wm_floor, invalid_floor, ",
                "    pre_range, post_range, filtered_cap, block_range, blocks_desired, ",
                "    miniblock_range, CTI_range) ",
                "{",
                "    dvcol <- (ifelse(dep_var == \"Accuracy\", \"Acc\", \"RT\")) %>% ",
                "        as.name",
                "    dv_mutate <- function(x, mutation) {",
                "        mutate_at(x, vars(!!dvcol), ~!!mutation)",
                "    }",
                "    blocksize <- if (batch == \"3a\") {",
                "        79",
                "    }",
                "    else if (batch %in% c(\"1a\", \"1b\")) {",
                "        54",
                "    }",
                "    else if (batch %in% c(\"2a\", \"2b\", \"2c\")) {",
                "        80",
                "    }",
                "    dem_df <- fread(here(\"data\", \"demographics.csv\"))",
                "    cmbd <- dir(path = here(\"data\", batch), pattern = \"*.csv\", ",
                "        full.names = TRUE, recursive = TRUE) %>% map_df(fread) %>% ",
                "        filter(Trial > 0) %>% mutate(Stim_Sides = ifelse(CorrSide == ",
                "        FlashSide, \"Valid\", \"Invalid\"), CTI = RoundTo(lilsquareStartTime - ",
                "        flash_circleEndTime, samp_per), block = RoundTo(Trial, ",
                "        blocksize, ceiling)/blocksize, RT = ifelse(Acc == 1, ",
                "        ButtonPressTime - lilsquareStartTime, NA)) %>% dv_mutate(expr(ifelse((is.na(RT) | ",
                "        RT > 0.1) & block %in% blocks_desired & lilsquareEndFrame - ",
                "        lilsquareStartFrame == 2 & lag(lilsquareEndFrame) - lag(lilsquareStartFrame) == ",
                "        2, ., NA))) %>% group_by(participant) %>% mutate(wm_Acc = ifelse(session == ",
                "        \"4\", mean(Acc_wmarith, na.rm = TRUE), 1), CatchAcc = ifelse(Opacity != ",
                "        0, NA, Acc) %>% mean(na.rm = TRUE)) %>% filter(CatchAcc >= ",
                "        catch_floor, Opacity != 0) %>% filter(mean(Acc[Stim_Sides == ",
                "        \"Invalid\"], na.rm = TRUE) >= invalid_floor) %>% mutate(CorrSide = case_when(CorrSide == ",
                "        1 ~ \"Right\", CorrSide == -1 ~ \"Left\", TRUE ~ \"Bottom\"), ",
                "        Stim_Sides = case_when(iso_sides ~ paste(CorrSide, Stim_Sides, ",
                "            sep = \"_\"), TRUE ~ Stim_Sides)) %>% group_by(CorrSide, ",
                "        participant) %>% mutate(Side_Acc = mean(Acc, na.rm = TRUE)) %>% ",
                "        group_by(participant) %>% mutate(Side_Diff = max(Side_Acc) - ",
                "        min(Side_Acc)) %>% left_join(dem_df, by = c(participant = \"SubjID\")) %>% ",
                "        filter(ifelse(attn_filter, \"task\", \"\") %>% grepl(Attentiveness), ",
                "            Side_Diff <= side_bias, wm_Acc >= wm_floor) %>% mutate(Acc_prefilter = mean(Acc, ",
                "        na.rm = TRUE)) %>% filter(Acc_prefilter %>% between(min(pre_range), ",
                "        max(pre_range), incbounds = TRUE), between(CTI, min(CTI_range), ",
                "        max(CTI_range))) %>% group_by(block, participant) %>% ",
                "        mutate(block_acc = mean(Acc, na.rm = TRUE)) %>% group_by(participant) %>% ",
                "        mutate(miniblock = RoundTo(row_number(), 16, ceiling) %>% ",
                "            `/`(16)) %>% group_by(participant, miniblock) %>% ",
                "        mutate(miniblock_avg = mean(Acc, na.rm = TRUE)) %>% ungroup() %>% ",
                "        dv_mutate(expr(ifelse(between(block_acc, min(block_range), ",
                "            max(block_range)) & between(miniblock_avg, min(miniblock_range), ",
                "            max(miniblock_range)), ., NA))) %>% group_by(participant) %>% ",
                "        mutate(Trials_filtered_out = sum(is.na(Acc))/n(), Acc_postfilter = mean(Acc, ",
                "            na.rm = TRUE)) %>% filter(between(Acc_postfilter, ",
                "        min(post_range), max(post_range)), Trials_filtered_out <= ",
                "        filtered_cap | averaging == \"Aggregate\")",
                "    pcpts_original <- unique(cmbd$participant)",
                "    if (averaging == \"Individual\") {",
                "        grouping_cnsts <- quos(participant, Trials_filtered_out, ",
                "            Acc_prefilter, Acc_postfilter, CatchAcc)",
                "    }",
                "    else if (averaging == \"Aggregate\") {",
                "        grouping_cnsts <- quos(participant)",
                "        cmbd$participant <- 1",
                "    }",
                "    pcpts <- unique(cmbd$participant)",
                "    indvs_only <- !\"Aggregate\" %in% c(averaging, visualize)",
                "    cmbd_summarize <- function(to_shuf) {",
                "        cmbd %>% group_by(Stim_Sides, !!!grouping_cnsts) %>% ",
                "            dv_mutate(expr(case_when(!!to_shuf ~ sample(.), TRUE ~ ",
                "                .))) %>% group_by(CTI, Stim_Sides, !!!grouping_cnsts) %>% ",
                "            summarise(Conf_Int = ifelse(!!to_shuf | sbtr | indvs_only, ",
                "                0, binom.exact(sum(!!dvcol, na.rm = TRUE), sum(!is.na(!!dvcol))) %>% ",
                "                  summarise((upper - lower)/2) %>% pull), `:=`(!!dvcol, ",
                "                mean(!!dvcol, na.rm = TRUE))) %>% dv_mutate(expr(na.approx(., ",
                "            na.rm = FALSE, rule = 2))) %>% dv_mutate(expr(rollapply(., ",
                "            clumps + 1, mean, partial = TRUE))) %>% group_by(Stim_Sides, ",
                "            !!!grouping_cnsts) %>% dv_mutate(expr(na.approx(., ",
                "            na.rm = FALSE, rule = 2))) %>% ungroup() %>% mutate_at(vars(Stim_Sides), ",
                "            ~case_when(!sbtr ~ ., TRUE ~ str_replace(., regex(\"_?(In)?valid\", ",
                "                ignore_case = T), \"Invalid - Valid\"))) %>% group_by(CTI, ",
                "            Stim_Sides, !!!grouping_cnsts, Conf_Int) %>% summarise_at(vars(!!dvcol), ",
                "            ~ifelse(sbtr, first(.) - last(.), .)) %>% group_by(Stim_Sides, ",
                "            !!!grouping_cnsts) %>% dv_mutate(expr(case_when(\"Detrending\" %in% ",
                "            trends ~ . - (polyfit(CTI, ., 2) %>% polyval(CTI)), ",
                "            TRUE ~ .))) %>% dv_mutate(expr(case_when(\"Demeaning\" %in% ",
                "            trends ~ . - mean(.), TRUE ~ .)))",
                "    }",
                "    grouping_viz <- if (visualize == \"Individual\") {",
                "        grouping_cnsts",
                "    }",
                "    else if (visualize == \"Aggregate\") {",
                "        quo()",
                "    }",
                "    line_size <- ifelse(indvs_only, 0.5, 1.5)",
                "    time_legend <- ifelse(length(display) == 2, FALSE, TRUE)",
                "    time_srs_graph <- cmbd_summarize(FALSE) %>% group_by(Stim_Sides, ",
                "        CTI, !!!grouping_viz) %>% summarise(Conf_Int = case_when(indvs_only ~ ",
                "        qnorm(0.975) * std_err(!!dvcol), averaging == \"Aggregate\" ~ ",
                "        mean(Conf_Int), TRUE ~ 0), `:=`(!!dvcol, mean(!!dvcol))) %>% ",
                "        ggplot(aes(CTI, !!dvcol, group = Stim_Sides, color = Stim_Sides, ",
                "            fill = Stim_Sides, ymin = !!dvcol - Conf_Int, ymax = !!dvcol + ",
                "                Conf_Int)) + labs(title = paste(dep_var, \"by Cue-Target Interval, Exp.\", ",
                "        batch), x = \"Cue-Target Interval (ms)\", y = dep_var, ",
                "        caption = \"Detrended and demeaned, then just for visualization purposes smoothed\") + ",
                "        geom_ribbon(alpha = ifelse(show_CI, 0.15, 0), aes(color = NULL), ",
                "            show.legend = time_legend) + geom_line(color = \"grey\", ",
                "        show.legend = FALSE, size = line_size) + stat_smooth(method = tolower(smooth_method), ",
                "        span = 0.2, se = FALSE, size = line_size, show.legend = time_legend)",
                "    win <- if (win_func == \"Tukey\") {",
                "        tukeywindow(n_distinct(cmbd$CTI), 0.5)",
                "    }",
                "    else {",
                "        match.fun(paste0(tolower(win_func), \"window\"))(n_distinct(cmbd$CTI))",
                "    }",
                "    locations <- unique(cmbd_summarize(FALSE)$Stim_Sides)",
                "    avg_CTI_dist <- cmbd$CTI %>% unique %>% sort %>% diff %>% ",
                "        mean",
                "    floating_point <- 10^-10",
                "    empty_rows_per_pcpt <- cmbd$CTI %>% range %>% diff %>% -duration %>% ",
                "        `/`(-avg_CTI_dist) %>% +floating_point %>% floor %>% ",
                "        -1",
                "    amplitude <- function(x, to_shuf) {",
                "        set.seed(x)",
                "        cmbd_summarize(to_shuf) %>% dv_mutate(expr(. * win/Norm(win))) %>% ",
                "            ungroup() %>% add_row(Stim_Sides = rep(locations, ",
                "            each = empty_rows_per_pcpt * length(pcpts)), `:=`(!!dvcol, ",
                "            0), participant = rep(pcpts, empty_rows_per_pcpt * ",
                "            (length(locations)))) %>% group_by(Stim_Sides, participant) %>% ",
                "            mutate(Observed = fft(!!dvcol) %>% *sqrt(2/n()) %>% ",
                "                Mod %>% `^`(2), Hz = (rank(row_number()) - 1)/(n() * ",
                "                avg_CTI_dist)) %>% filter(rank(Hz) - 1 <= floor(n_distinct(Hz)/2), ",
                "            between(Hz, min(xrange) - floating_point, max(xrange) + ",
                "                floating_point)) %>% group_by(Hz, Stim_Sides, ",
                "            !!!grouping_viz) %>% summarise(Conf_Int = ifelse(indvs_only & ",
                "            to_shuf == FALSE, qnorm(0.975) * std_err(Observed), ",
                "            0), Observed = mean(Observed))",
                "    }",
                "    amps_null <- 1:shuff %>% future_map_dfr(~amplitude(.x, TRUE)) %>% ",
                "        group_by(Hz, Stim_Sides) %>% mutate(ntile = PercentRank(desc(Observed))) %>% ",
                "        rename_all(~paste0(., \"_null\"))",
                "    crossref <- function(Hz, Stim_Sides, Observed, col_pull, ",
                "        filter_expr, ntile_parameter) {",
                "        amps_null %>% filter(Hz == Hz_null, Stim_Sides == Stim_Sides_null, ",
                "            !!parse_expr(filter_expr)) %>% top_n(1, Observed_null) %>% ",
                "            pull(col_pull)",
                "    }",
                "    amps_real <- future_map_dfr(1, ~amplitude(.x, FALSE)) %>% ",
                "        mutate(ntile = future_pmap_dbl(list(Hz, Stim_Sides, Observed, ",
                "            col_pull = \"ntile_null\", filter_expr = \"Observed > Observed_null | Observed_null == min(Observed_null)\"), ",
                "            crossref)) %>% group_by(Stim_Sides) %>% mutate_at(vars(ntile), ",
                "        list(~./p.adjust(., method = mult_correcs))) %>% ungroup() %>% ",
                "        mutate(`Significance Cutoff` = future_pmap_dbl(list(Hz, ",
                "            Stim_Sides, Observed, col_pull = \"Observed_null\", ",
                "            filter_expr = \"ntile_null >=  ntile_parameter * α\", ",
                "            ntile_parameter = ntile), crossref))",
                "    if (indvs_only) {",
                "        amped_for_graph <- amps_real %>% pivot_longer(c(Observed, ",
                "            `Significance Cutoff`), \"source\", values_to = \"Power\") %>% ",
                "            filter(source == \"Observed\")",
                "        line_col <- NULL",
                "        sig_points <- NULL",
                "    }",
                "    else {",
                "        amped_for_graph <- amps_real %>% pivot_longer(c(Observed, ",
                "            `Significance Cutoff`), \"source\", values_to = \"Power\") %>% ",
                "            mutate_at(vars(Conf_Int), ~ifelse(source == \"Observed\", ",
                "                ., 0))",
                "        line_col <- as.symbol(\"source\")",
                "        sig_points <- list(geom_point(size = 3, data = amps_real %>% ",
                "            filter(Observed > `Significance Cutoff`) %>% select(-c(`Significance Cutoff`, ",
                "            ntile)) %>% pivot_longer(Observed, \"source\", values_to = \"Power\"), ",
                "            aes(x = Hz, y = Power, linetype = NULL, fill = NULL, ",
                "                ymin = NULL, ymax = NULL)))",
                "    }",
                "    fft_aggregate_graph <- ggplot(amped_for_graph, aes(Hz, Power, ",
                "        col = Stim_Sides, linetype = !!line_col, fill = Stim_Sides, ",
                "        ymin = Power - Conf_Int, ymax = Power + Conf_Int)) + ",
                "        labs(title = paste0(\"FFT of Target \", dep_var, \", Exp. \", ",
                "            batch), col = \"Target Location\", y = \"Spectral Power\")",
                "    Hz_separation <- amps_real$Hz %>% unique %>% sort %>% diff %>% ",
                "        mean",
                "    fft_aggregate_graph2 <- list(geom_line(size = line_size), ",
                "        scale_linetype_manual(values = c(\"solid\", \"dashed\")), ",
                "        scale_x_continuous(name = \"Frequency (Hz)\", limits = c(min(xrange), ",
                "            max(xrange) + floating_point), breaks = seq(min(xrange), ",
                "            max(xrange), case_when(indvs_only & n_distinct(amps_real$Hz) > ",
                "                5 ~ 2, indvs_only & n_distinct(amps_real$Hz) > ",
                "                11 ~ 1, TRUE ~ round(Hz_separation, 2)))), theme(panel.grid.minor.x = element_blank()), ",
                "        labs(linetype = \"\", caption = paste(\"Significance threshold at p < \", ",
                "            as.character(α))), geom_ribbon(alpha = ifelse(show_CI, ",
                "            0.15, 0), aes(color = NULL)), sig_points)",
                "    clustering_theme <- if (indvs_only) {",
                "        list(theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)), ",
                "            facet_wrap(~factor(participant, levels = pcpts), ",
                "                ncol = round(length(pcpts)/3), scales = \"free_x\"))",
                "    }",
                "    else {",
                "        list(theme(legend.key.size = unit(0.55, \"in\")), labs(subtitle = paste(\"Data from\", ",
                "            as.character(length(pcpts_original)), \"participants\")))",
                "    }",
                "    viridis_cols <- 0.7 + RoundTo(1e-04 * RoundTo(length(locations), ",
                "        4, floor), 0.2, ceiling)",
                "    common_theme <- list(theme_bw(), scale_color_viridis_d(option = \"C\", ",
                "        end = viridis_cols, labels = str_replace(sort(locations), ",
                "            \"_\", \" \")), scale_fill_viridis_d(option = \"C\", end = viridis_cols), ",
                "        guides(fill = FALSE), clustering_theme)",
                "    time_series <- time_srs_graph + common_theme",
                "    FFT <- fft_aggregate_graph + common_theme + fft_aggregate_graph2",
                "    grid.arrange(grobs = map(display, ~eval(as.symbol(.x))), ",
                "        ncol = length(display)) %>% ggsave(width = max(xrange), ",
                "        filename = here(\"plots\", paste0(batch, \"_\", dep_var, ",
                "            \".pdf\")))",
                "}"
            ]
        }
    ]
}

