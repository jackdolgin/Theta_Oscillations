{
    "name": "Rhythms in Internal and External Attentional Focus, Exps 1 + 2",
    "info": {
        "author": [
            "Jack Dolgin",
            "Ian C. Fiebelkorn",
            "Tobias Egner"
        ]
    },
    "hypotheses": [
        {
            "id": "h1",
            "description": "In the 2-object task, detection rates at invalidly-cued locations will peak at approximately 4 Hz., and this peak will reach statistical significance.",
            "criteria": [],
            "evaluation": "&"
        },
        {
            "id": "h2",
            "description": "In the 2-object task, response times at invalidly-cued locations will peak at approximately 4 Hz., and this peak will reach statistical significance.",
            "criteria": [],
            "evaluation": "&"
        },
        {
            "id": "h3",
            "description": "In the 3-object task, detection rates at invalidly-cued locations will peak at a lower frequency—2 or 3 Hz.—than in the 2-object task, and this peak will reach statistical significance.",
            "criteria": [],
            "evaluation": "&"
        },
        {
            "id": "h4",
            "description": "In the 3-object task, response times at invalidly-cued locations will peak at a lower frequency—2 or 3 Hz.—than in the 2-object task, and this peak will reach statistical significance.",
            "criteria": [],
            "evaluation": "&"
        }
    ],
    "methods": [],
    "data": [],
    "prep": [],
    "analyses": [
        {
            "id": "main_analysis_h1",
            "func": "main_function",
            "params": {
                "dset": "Pilot",
                "display": "FFT Across Participants",
                "ext_objects": 2,
                "iso_sides": false,
                "sbtr": false,
                "samp_per": 0.0167,
                "clumps": 2,
                "dep_var": "Accuracy",
                "pval": 0.025,
                "shuff": 50,
                "trends": [
                    "Detrending",
                    "Demeaning"
                ],
                "smooth_method": "Loess",
                "win_func": "Tukey",
                "xaxisvals": 15,
                "duration": 1,
                "attn_filter": false,
                "catch_floor": 0.85,
                "side_bias": 0.2,
                "pre_range": [0.45, 0.75],
                "post_range": [0.45, 0.75],
                "block_floor": 0.4,
                "miniblock_range": [0.4, 0.8],
                "CTI_range": [0.3, 1.29]
            },
            "code": [
                "function (dset, display, ext_objects, iso_sides, sbtr, samp_per, ",
                "    clumps, dep_var, pval, shuff, trends, smooth_method, win_func, ",
                "    xaxisvals, duration, attn_filter, catch_floor, side_bias, ",
                "    pre_range, post_range, block_floor, miniblock_range, CTI_range) ",
                "{",
                "    grouping_cnsts <- quos(participant, Trials_filtered_out, ",
                "        Acc_prefilter, Acc_postfilter, CatchAcc)",
                "    pcpts <- if (dset == \"Pilot\") {",
                "        blocksize <- 54",
                "        if (ext_objects == 2) ",
                "            301:324",
                "        else 401:427",
                "    }",
                "    else {",
                "        blocksize <- 80",
                "        if (ext_objects == 2) ",
                "            501:530",
                "        else 601:630",
                "    }",
                "    dep_var_abbr <- as.name(ifelse(dep_var == \"Accuracy\", \"Acc\", ",
                "        \"RT\"))",
                "    dem_df <- fread(file.path(\"data\", \"Demographics.csv\")) %>% ",
                "        mutate_at(vars(SubjID), as.numeric)",
                "    pcpts_combine <- function(pcpt) {",
                "        fread(file.path(\"data\", pcpt, paste0(pcpt, \".csv\"))) %>% ",
                "            filter(Trial > 0) %>% mutate(CatchAcc = mean(ifelse(Opacity > ",
                "            0, NA, Acc), na.rm = TRUE)) %>% group_by(CorrSide) %>% ",
                "            mutate(Side_Acc = mean(Acc, na.rm = TRUE)) %>% ungroup() %>% ",
                "            mutate(Side_Diff = max(Side_Acc) - min(Side_Acc)) %>% ",
                "            left_join(dem_df, by = c(participant = \"SubjID\")) %>% ",
                "            filter(CatchAcc >= catch_floor, grepl(ifelse(attn_filter, ",
                "                \"fully alert\", \"\"), Q9), Side_Diff <= side_bias, ",
                "                Opacity > 0) %>% mutate(Acc_prefilter = mean(Acc, ",
                "            na.rm = TRUE), CTI = RoundTo(RoundTo(lilsquareStartTime - ",
                "            flash_circleEndTime, 1/60), samp_per)) %>% filter(between(Acc_prefilter, ",
                "            pre_range[1], pre_range[2], incbounds = TRUE), between(CTI, ",
                "            min(CTI_range), max(CTI_range))) %>% mutate(block = RoundTo(Trial, ",
                "            blocksize, ceiling)/blocksize, RT = ifelse(Acc == ",
                "            1 & ButtonPressTime - lilsquareStartTime > 0.1, ButtonPressTime - ",
                "            lilsquareStartTime, NA), Stim_Sides = as.character(ifelse(CorrSide == ",
                "            FlashSide, \"Valid\", \"Invalid\")), CorrSide = case_when(CorrSide == ",
                "            1 ~ \"Right\", CorrSide == -1 ~ \"Left\", TRUE ~ \"Bottom\"), ",
                "            Stim_Sides = case_when(iso_sides ~ paste(CorrSide, ",
                "                Stim_Sides, sep = \"_\"), TRUE ~ Stim_Sides)) %>% ",
                "            group_by(block) %>% mutate(block_acc = mean(Acc)) %>% ",
                "            ungroup() %>% mutate(rown = row_number(), miniblock = RoundTo(rown, ",
                "            16, ceiling)/16) %>% group_by(miniblock) %>% mutate(miniblock_avg = mean(Acc)) %>% ",
                "            ungroup() %>% mutate_at(vars(Acc, RT), list(~ifelse(block_acc <= ",
                "            block_floor | !between(miniblock_avg, miniblock_range[1], ",
                "            miniblock_range[2]), NA, .))) %>% mutate(Trials_filtered_out = sum(is.na(Acc))/n(), ",
                "            Acc_postfilter = mean(Acc, na.rm = TRUE)) %>% filter(between(Acc_postfilter, ",
                "            post_range[1], post_range[2])) %>% group_by(CTI, ",
                "            Stim_Sides, !!!grouping_cnsts) %>% summarise_at(vars(Acc, ",
                "            RT), list(~mean(., na.rm = TRUE))) %>% arrange(CTI) %>% ",
                "            group_by(Stim_Sides) %>% mutate_at(vars(Acc, RT), ",
                "            list(~na.approx(., na.rm = FALSE, rule = 2))) %>% ",
                "            mutate_at(vars(Acc, RT), list(~rollapply(., clumps + ",
                "                1, mean, partial = TRUE)))",
                "    }",
                "    cmbd <- do.call(rbind, lapply(pcpts, pcpts_combine)) %>% ",
                "        arrange(Acc_prefilter, participant, Stim_Sides, CTI)",
                "    CTIs <- unique(cmbd$CTI)",
                "    if (win_func == \"Tukey\") {",
                "        win <- tukeywindow(length(CTIs), 0.5)",
                "    }",
                "    else {",
                "        win <- match.fun(paste0(tolower(win_func), \"window\"))(length(CTIs))",
                "    }",
                "    locations <- unique(cmbd$Stim_Sides)",
                "    pcpts <- unique(cmbd$participant)",
                "    cmbd_w <- cmbd %>% pivot_wider(CTI:CatchAcc, Stim_Sides, ",
                "        values_from = !!dep_var_abbr) %>% arrange(Acc_prefilter, ",
                "        participant, CTI) %>% group_by(participant) %>% mutate_at(vars(locations), ",
                "        list(~na.approx(., na.rm = FALSE, rule = 2)))",
                "    if (sbtr) {",
                "        s <- tail(1:ncol(cmbd_w), length(locations))[c(TRUE, ",
                "            FALSE)]",
                "        cmbd_w[paste0(names(cmbd_w[s]), \"_minus_\", names(cmbd_w)[s + ",
                "            1])] <- cmbd_w[s] - cmbd_w[s + 1]",
                "        locations = tail(colnames(cmbd_w), length(locations)/2)",
                "    }",
                "    conf_int <- function(x, ...) {",
                "        x %>% group_by_(.dots = lazy_dots(...)) %>% summarise_at(vars(locations), ",
                "            list(~qnorm(0.975) * std_err(.)))",
                "    }",
                "    amplitude <- function(x, y) {",
                "        pre_pad <- length(pcpts) * (length(unique(cmbd_w$CTI))) * ",
                "            y",
                "        x %>% group_by(participant) %>% mutate_at(vars(locations), ",
                "            list(~case_when(\"Detrending\" %in% trends ~ . - polyval(polyfit(CTI, ",
                "                ., 2), CTI), TRUE ~ .))) %>% mutate_at(vars(locations), ",
                "            list(~case_when(\"Demeaning\" %in% trends ~ . - mean(.), ",
                "                TRUE ~ .))) %>% mutate_at(vars(locations), list(~. * ",
                "            win/Norm(win))) %>% ungroup() %>% add_row(participant = rep(pcpts, ",
                "            y * (ceiling((duration - diff(range(cmbd_w$CTI)))/samp_per)))) %>% ",
                "            head(-length(pcpts) * y) %>% mutate_at(vars(locations), ",
                "            list(~coalesce(., 0))) %>% mutate(samp_shuff = ifelse(row_number() <= ",
                "            pre_pad, RoundTo(row_number(), pre_pad/y, ceiling)/(pre_pad/y), ",
                "            RoundTo(row_number() - pre_pad, (n() - pre_pad)/(y), ",
                "                ceiling)/((n() - pre_pad)/y))) %>% group_by(participant, ",
                "            samp_shuff) %>% mutate_at(vars(locations), list(~Mod(sqrt(2/n()) * ",
                "            fft(.))^2)) %>% mutate(Hz = (row_number() - 1)/(n() * ",
                "            samp_per)) %>% ungroup() %>% select(-CTI)",
                "    }",
                "    amps <- amplitude(cmbd_w, 1)",
                "    fft_x <- round(1/(length(unique(amps$Hz)) * samp_per), 1)",
                "    xaxis_r <- RoundTo(xaxisvals, fft_x)",
                "    t_srs_g <- function(x) {",
                "        cmbd_w %>% gather(Location, !!dep_var_abbr, -c(CTI, !!!grouping_cnsts)) %>% ",
                "            right_join(gather(conf_int(cmbd_w, CTI), Location, ",
                "                Conf_Int, -CTI), by = c(\"CTI\", \"Location\")) %>% ",
                "            group_by(CTI, Location, Conf_Int, !!!head(grouping_cnsts, ",
                "                x)) %>% summarise(`:=`(!!dep_var_abbr, mean(!!dep_var_abbr))) %>% ",
                "            ggplot(aes(CTI, !!dep_var_abbr, group = Location, ",
                "                color = Location, fill = Location, ymin = !!dep_var_abbr - ",
                "                  Conf_Int, ymax = !!dep_var_abbr + Conf_Int)) + ",
                "            labs(title = paste0(dep_var_abbr, \" by Cue-Target Interval \", ",
                "                ext_objects, \"-object Task\"), x = \"Cue-Target Interval (ms)\")",
                "    }",
                "    fft_g <- function(x) {",
                "        x + labs(title = paste0(\"FFT of Target \", dep_var, \", \", ",
                "            ext_objects, \"-object task\"), col = \"Target Location\", ",
                "            y = \"Spectral Power\") + theme(panel.grid.minor.x = element_blank(), ",
                "            panel.grid.major.y = element_blank())",
                "    }",
                "    viridis_cols <- 0.7 + RoundTo(1e-04 * RoundTo(length(locations), ",
                "        4, floor), 0.2, ceiling)",
                "    graph <- function(y, x) {",
                "        y(x) + theme_bw() + scale_color_viridis_d(option = \"C\", ",
                "            end = viridis_cols, labels = sapply(locations, simplify = TRUE, ",
                "                function(x) gsub(\"_\", \" \", x), USE.NAMES = FALSE)) + ",
                "            scale_fill_viridis_d(option = \"C\", end = viridis_cols) + ",
                "            guides(colour = guide_legend(reverse = TRUE), fill = FALSE)",
                "    }",
                "    idvl_g <- function(y, x) {",
                "        graph(y, x) + theme(plot.title = element_text(hjust = 0.5), ",
                "            plot.subtitle = element_text(hjust = 0.5)) + facet_wrap(~factor(participant, ",
                "            levels = pcpts), ncol = round(length(pcpts)/3), scales = \"free_x\")",
                "    }",
                "    cmbd_g <- function(y, x) {",
                "        graph(y, x) + geom_line(size = 1.5) + theme(legend.key.size = unit(0.55, ",
                "            \"in\")) + labs(subtitle = paste(\"Data from\", as.character(length(pcpts)), ",
                "            \"participants\"))",
                "    }",
                "    sv_cmbd_g <- function(x) {",
                "        x %>% ggsave(filename = file.path(\"plots\", paste(display, ",
                "            ext_objects, \"objects.pdf\")), width = xaxisvals)",
                "    }",
                "    if (display == \"prelim_table\") {",
                "        write.csv(cmbd, file.path(\"plots\", \"Prelim_table.csv\"))",
                "    }",
                "    else if (display == \"fft_table\") {",
                "        write.csv(amps, file.path(\"plots\", \"FFT_table.csv\"))",
                "    }",
                "    else if (display == \"Time-Series + FFT by Individual\") {",
                "        ts_facets <- idvl_g(t_srs_g, 1) + geom_line(alpha = I(2/10), ",
                "            color = \"grey\", show.legend = FALSE) + stat_smooth(method = tolower(smooth_method), ",
                "            span = 0.2, se = FALSE, size = 0.5, show.legend = FALSE)",
                "        plot_label <- amps %>% group_by(!!!grouping_cnsts) %>% ",
                "            summarise() %>% ungroup() %>% drop_na() %>% mutate_at(vars(!!!tail(grouping_cnsts, ",
                "            -1)), funs(paste(quo_name(quo(.)), \"=\", percent(.)))) %>% ",
                "            unite(lab, !!!tail(grouping_cnsts, -1), sep = \"\\n\", ",
                "                remove = FALSE)",
                "        fft_facets <- idvl_g(fft_g, amps %>% group_by(participant, ",
                "            Hz) %>% summarise_all(mean) %>% gather(Flash_and_or_field, ",
                "            Power, -Hz, -samp_shuff, -c(!!!grouping_cnsts)) %>% ",
                "            ggplot(aes(Hz, Power, color = Flash_and_or_field))) + ",
                "            geom_line() + scale_x_continuous(name = \"Frequency (Hz)\", ",
                "            limits = c(0, xaxisvals), breaks = seq(0, xaxisvals, ",
                "                ifelse(xaxisvals > 10 | xaxisvals != xaxis_r, ",
                "                  1/max(Closest(xaxis_r/seq(fft_x, xaxis_r, fft_x), ",
                "                    5)/xaxis_r), fft_x))) + labs(caption = paste(\"Data from\", ",
                "            as.character(length(pcpts)), \"participants\")) + geom_text(data = as.data.frame(plot_label), ",
                "            inherit.aes = FALSE, size = 1.2, aes(label = lab, ",
                "                x = Inf, y = Inf), vjust = 1.15, hjust = 1.05)",
                "        side_by_side <- arrangeGrob(ts_facets, fft_facets, ncol = 2)",
                "        ggsave(file.path(\"plots\", \"Indvls_Plots.pdf\"), width = 25, ",
                "            side_by_side)",
                "    }",
                "    else if (display == \"Time-Series Across Participants\") {",
                "        (move_layers(cmbd_g(t_srs_g, 0) + theme(panel.grid = element_blank()) + ",
                "            geom_ribbon(alpha = 0.15, aes(color = NULL)), \"GeomRibbon\", ",
                "            position = \"bottom\")) %>% sv_cmbd_g",
                "    }",
                "    else {",
                "        set.seed(123)",
                "        fft_x <- 1/(length(unique(amps$Hz)) * samp_per)",
                "        shuffle <- function(x) {",
                "            cmbd_w %>% group_by(participant) %>% sample_n(length(CTIs), ",
                "                weight = CTI) %>% mutate_at(vars(CTI), list(~seq(min(CTIs), ",
                "                max(CTIs), samp_per))) %>% mutate(samp_shuff = x)",
                "        }",
                "        amps_shuff <- do.call(rbind, lapply(1:shuff, shuffle)) %>% ",
                "            amplitude(shuff) %>% group_by(Hz, samp_shuff) %>% ",
                "            summarise_at(vars(locations), mean) %>% group_by(Hz) %>% ",
                "            summarise_at(vars(locations), list(~quantile(., probs = 1 - ",
                "                pval))) %>% combine(amps %>% group_by(Hz) %>% ",
                "            summarise_at(vars(locations), mean), names = (c(\"Significance Cutoff\", ",
                "            \"Observed Data\"))) %>% gather(Location, Power, -c(Hz, ",
                "            source)) %>% right_join(gather(conf_int(amps, Hz), ",
                "            Location, Conf_Int, -Hz), by = c(\"Hz\", \"Location\"))",
                "        (move_layers(cmbd_g(fft_g, ggplot(amps_shuff, aes(Hz, ",
                "            Power, col = Location, linetype = source, ymin = Power - ",
                "                Conf_Int, ymax = Power + Conf_Int, fill = Location))) + ",
                "            scale_linetype_manual(values = c(\"solid\", \"dashed\")) + ",
                "            scale_x_continuous(name = \"Frequency (Hz)\", limits = c(0, ",
                "                xaxisvals), breaks = seq(0, xaxisvals, ifelse(fft_x > ",
                "                0.5, round(fft_x, 2), 1))) + labs(linetype = \"\", ",
                "            caption = paste(\"Significance threshold at p < \", ",
                "                as.character(pval))) + geom_ribbon(data = filter(amps_shuff, ",
                "            source == \"Observed Data\"), alpha = 0.15, aes(color = NULL)) + ",
                "            geom_point(size = 3, data = amps_shuff %>% spread(source, ",
                "                Power) %>% filter(`Observed Data` > `Significance Cutoff`) %>% ",
                "                select(-c(`Significance Cutoff`, Conf_Int)) %>% ",
                "                gather(source, Power, -Hz, -Location), aes(ymin = NULL, ",
                "                ymax = NULL)), \"GeomRibbon\", position = \"bottom\")) %>% ",
                "            sv_cmbd_g",
                "    }",
                "}"
            ]
        },
        {
            "id": "main_analysis_h2",
            "func": "main_function",
            "params": {
                "dset": "Pilot",
                "display": "FFT Across Participants",
                "ext_objects": 2,
                "iso_sides": false,
                "sbtr": false,
                "samp_per": 0.0167,
                "clumps": 2,
                "dep_var": "Response Time",
                "pval": 0.025,
                "shuff": 50,
                "trends": [
                    "Detrending",
                    "Demeaning"
                ],
                "smooth_method": "Loess",
                "win_func": "Tukey",
                "xaxisvals": 15,
                "duration": 1,
                "attn_filter": false,
                "catch_floor": 0.85,
                "side_bias": 0.2,
                "pre_range": [0.45, 0.75],
                "post_range": [0.45, 0.75],
                "block_floor": 0.4,
                "miniblock_range": [0.4, 0.8],
                "CTI_range": [0.3, 1.29]
            },
            "code": [
                "function (dset, display, ext_objects, iso_sides, sbtr, samp_per, ",
                "    clumps, dep_var, pval, shuff, trends, smooth_method, win_func, ",
                "    xaxisvals, duration, attn_filter, catch_floor, side_bias, ",
                "    pre_range, post_range, block_floor, miniblock_range, CTI_range) ",
                "{",
                "    grouping_cnsts <- quos(participant, Trials_filtered_out, ",
                "        Acc_prefilter, Acc_postfilter, CatchAcc)",
                "    pcpts <- if (dset == \"Pilot\") {",
                "        blocksize <- 54",
                "        if (ext_objects == 2) ",
                "            301:324",
                "        else 401:427",
                "    }",
                "    else {",
                "        blocksize <- 80",
                "        if (ext_objects == 2) ",
                "            501:530",
                "        else 601:630",
                "    }",
                "    dep_var_abbr <- as.name(ifelse(dep_var == \"Accuracy\", \"Acc\", ",
                "        \"RT\"))",
                "    dem_df <- fread(file.path(\"data\", \"Demographics.csv\")) %>% ",
                "        mutate_at(vars(SubjID), as.numeric)",
                "    pcpts_combine <- function(pcpt) {",
                "        fread(file.path(\"data\", pcpt, paste0(pcpt, \".csv\"))) %>% ",
                "            filter(Trial > 0) %>% mutate(CatchAcc = mean(ifelse(Opacity > ",
                "            0, NA, Acc), na.rm = TRUE)) %>% group_by(CorrSide) %>% ",
                "            mutate(Side_Acc = mean(Acc, na.rm = TRUE)) %>% ungroup() %>% ",
                "            mutate(Side_Diff = max(Side_Acc) - min(Side_Acc)) %>% ",
                "            left_join(dem_df, by = c(participant = \"SubjID\")) %>% ",
                "            filter(CatchAcc >= catch_floor, grepl(ifelse(attn_filter, ",
                "                \"fully alert\", \"\"), Q9), Side_Diff <= side_bias, ",
                "                Opacity > 0) %>% mutate(Acc_prefilter = mean(Acc, ",
                "            na.rm = TRUE), CTI = RoundTo(RoundTo(lilsquareStartTime - ",
                "            flash_circleEndTime, 1/60), samp_per)) %>% filter(between(Acc_prefilter, ",
                "            pre_range[1], pre_range[2], incbounds = TRUE), between(CTI, ",
                "            min(CTI_range), max(CTI_range))) %>% mutate(block = RoundTo(Trial, ",
                "            blocksize, ceiling)/blocksize, RT = ifelse(Acc == ",
                "            1 & ButtonPressTime - lilsquareStartTime > 0.1, ButtonPressTime - ",
                "            lilsquareStartTime, NA), Stim_Sides = as.character(ifelse(CorrSide == ",
                "            FlashSide, \"Valid\", \"Invalid\")), CorrSide = case_when(CorrSide == ",
                "            1 ~ \"Right\", CorrSide == -1 ~ \"Left\", TRUE ~ \"Bottom\"), ",
                "            Stim_Sides = case_when(iso_sides ~ paste(CorrSide, ",
                "                Stim_Sides, sep = \"_\"), TRUE ~ Stim_Sides)) %>% ",
                "            group_by(block) %>% mutate(block_acc = mean(Acc)) %>% ",
                "            ungroup() %>% mutate(rown = row_number(), miniblock = RoundTo(rown, ",
                "            16, ceiling)/16) %>% group_by(miniblock) %>% mutate(miniblock_avg = mean(Acc)) %>% ",
                "            ungroup() %>% mutate_at(vars(Acc, RT), list(~ifelse(block_acc <= ",
                "            block_floor | !between(miniblock_avg, miniblock_range[1], ",
                "            miniblock_range[2]), NA, .))) %>% mutate(Trials_filtered_out = sum(is.na(Acc))/n(), ",
                "            Acc_postfilter = mean(Acc, na.rm = TRUE)) %>% filter(between(Acc_postfilter, ",
                "            post_range[1], post_range[2])) %>% group_by(CTI, ",
                "            Stim_Sides, !!!grouping_cnsts) %>% summarise_at(vars(Acc, ",
                "            RT), list(~mean(., na.rm = TRUE))) %>% arrange(CTI) %>% ",
                "            group_by(Stim_Sides) %>% mutate_at(vars(Acc, RT), ",
                "            list(~na.approx(., na.rm = FALSE, rule = 2))) %>% ",
                "            mutate_at(vars(Acc, RT), list(~rollapply(., clumps + ",
                "                1, mean, partial = TRUE)))",
                "    }",
                "    cmbd <- do.call(rbind, lapply(pcpts, pcpts_combine)) %>% ",
                "        arrange(Acc_prefilter, participant, Stim_Sides, CTI)",
                "    CTIs <- unique(cmbd$CTI)",
                "    if (win_func == \"Tukey\") {",
                "        win <- tukeywindow(length(CTIs), 0.5)",
                "    }",
                "    else {",
                "        win <- match.fun(paste0(tolower(win_func), \"window\"))(length(CTIs))",
                "    }",
                "    locations <- unique(cmbd$Stim_Sides)",
                "    pcpts <- unique(cmbd$participant)",
                "    cmbd_w <- cmbd %>% pivot_wider(CTI:CatchAcc, Stim_Sides, ",
                "        values_from = !!dep_var_abbr) %>% arrange(Acc_prefilter, ",
                "        participant, CTI) %>% group_by(participant) %>% mutate_at(vars(locations), ",
                "        list(~na.approx(., na.rm = FALSE, rule = 2)))",
                "    if (sbtr) {",
                "        s <- tail(1:ncol(cmbd_w), length(locations))[c(TRUE, ",
                "            FALSE)]",
                "        cmbd_w[paste0(names(cmbd_w[s]), \"_minus_\", names(cmbd_w)[s + ",
                "            1])] <- cmbd_w[s] - cmbd_w[s + 1]",
                "        locations = tail(colnames(cmbd_w), length(locations)/2)",
                "    }",
                "    conf_int <- function(x, ...) {",
                "        x %>% group_by_(.dots = lazy_dots(...)) %>% summarise_at(vars(locations), ",
                "            list(~qnorm(0.975) * std_err(.)))",
                "    }",
                "    amplitude <- function(x, y) {",
                "        pre_pad <- length(pcpts) * (length(unique(cmbd_w$CTI))) * ",
                "            y",
                "        x %>% group_by(participant) %>% mutate_at(vars(locations), ",
                "            list(~case_when(\"Detrending\" %in% trends ~ . - polyval(polyfit(CTI, ",
                "                ., 2), CTI), TRUE ~ .))) %>% mutate_at(vars(locations), ",
                "            list(~case_when(\"Demeaning\" %in% trends ~ . - mean(.), ",
                "                TRUE ~ .))) %>% mutate_at(vars(locations), list(~. * ",
                "            win/Norm(win))) %>% ungroup() %>% add_row(participant = rep(pcpts, ",
                "            y * (ceiling((duration - diff(range(cmbd_w$CTI)))/samp_per)))) %>% ",
                "            head(-length(pcpts) * y) %>% mutate_at(vars(locations), ",
                "            list(~coalesce(., 0))) %>% mutate(samp_shuff = ifelse(row_number() <= ",
                "            pre_pad, RoundTo(row_number(), pre_pad/y, ceiling)/(pre_pad/y), ",
                "            RoundTo(row_number() - pre_pad, (n() - pre_pad)/(y), ",
                "                ceiling)/((n() - pre_pad)/y))) %>% group_by(participant, ",
                "            samp_shuff) %>% mutate_at(vars(locations), list(~Mod(sqrt(2/n()) * ",
                "            fft(.))^2)) %>% mutate(Hz = (row_number() - 1)/(n() * ",
                "            samp_per)) %>% ungroup() %>% select(-CTI)",
                "    }",
                "    amps <- amplitude(cmbd_w, 1)",
                "    fft_x <- round(1/(length(unique(amps$Hz)) * samp_per), 1)",
                "    xaxis_r <- RoundTo(xaxisvals, fft_x)",
                "    t_srs_g <- function(x) {",
                "        cmbd_w %>% gather(Location, !!dep_var_abbr, -c(CTI, !!!grouping_cnsts)) %>% ",
                "            right_join(gather(conf_int(cmbd_w, CTI), Location, ",
                "                Conf_Int, -CTI), by = c(\"CTI\", \"Location\")) %>% ",
                "            group_by(CTI, Location, Conf_Int, !!!head(grouping_cnsts, ",
                "                x)) %>% summarise(`:=`(!!dep_var_abbr, mean(!!dep_var_abbr))) %>% ",
                "            ggplot(aes(CTI, !!dep_var_abbr, group = Location, ",
                "                color = Location, fill = Location, ymin = !!dep_var_abbr - ",
                "                  Conf_Int, ymax = !!dep_var_abbr + Conf_Int)) + ",
                "            labs(title = paste0(dep_var_abbr, \" by Cue-Target Interval \", ",
                "                ext_objects, \"-object Task\"), x = \"Cue-Target Interval (ms)\")",
                "    }",
                "    fft_g <- function(x) {",
                "        x + labs(title = paste0(\"FFT of Target \", dep_var, \", \", ",
                "            ext_objects, \"-object task\"), col = \"Target Location\", ",
                "            y = \"Spectral Power\") + theme(panel.grid.minor.x = element_blank(), ",
                "            panel.grid.major.y = element_blank())",
                "    }",
                "    viridis_cols <- 0.7 + RoundTo(1e-04 * RoundTo(length(locations), ",
                "        4, floor), 0.2, ceiling)",
                "    graph <- function(y, x) {",
                "        y(x) + theme_bw() + scale_color_viridis_d(option = \"C\", ",
                "            end = viridis_cols, labels = sapply(locations, simplify = TRUE, ",
                "                function(x) gsub(\"_\", \" \", x), USE.NAMES = FALSE)) + ",
                "            scale_fill_viridis_d(option = \"C\", end = viridis_cols) + ",
                "            guides(colour = guide_legend(reverse = TRUE), fill = FALSE)",
                "    }",
                "    idvl_g <- function(y, x) {",
                "        graph(y, x) + theme(plot.title = element_text(hjust = 0.5), ",
                "            plot.subtitle = element_text(hjust = 0.5)) + facet_wrap(~factor(participant, ",
                "            levels = pcpts), ncol = round(length(pcpts)/3), scales = \"free_x\")",
                "    }",
                "    cmbd_g <- function(y, x) {",
                "        graph(y, x) + geom_line(size = 1.5) + theme(legend.key.size = unit(0.55, ",
                "            \"in\")) + labs(subtitle = paste(\"Data from\", as.character(length(pcpts)), ",
                "            \"participants\"))",
                "    }",
                "    sv_cmbd_g <- function(x) {",
                "        x %>% ggsave(filename = file.path(\"plots\", paste(display, ",
                "            ext_objects, \"objects.pdf\")), width = xaxisvals)",
                "    }",
                "    if (display == \"prelim_table\") {",
                "        write.csv(cmbd, file.path(\"plots\", \"Prelim_table.csv\"))",
                "    }",
                "    else if (display == \"fft_table\") {",
                "        write.csv(amps, file.path(\"plots\", \"FFT_table.csv\"))",
                "    }",
                "    else if (display == \"Time-Series + FFT by Individual\") {",
                "        ts_facets <- idvl_g(t_srs_g, 1) + geom_line(alpha = I(2/10), ",
                "            color = \"grey\", show.legend = FALSE) + stat_smooth(method = tolower(smooth_method), ",
                "            span = 0.2, se = FALSE, size = 0.5, show.legend = FALSE)",
                "        plot_label <- amps %>% group_by(!!!grouping_cnsts) %>% ",
                "            summarise() %>% ungroup() %>% drop_na() %>% mutate_at(vars(!!!tail(grouping_cnsts, ",
                "            -1)), funs(paste(quo_name(quo(.)), \"=\", percent(.)))) %>% ",
                "            unite(lab, !!!tail(grouping_cnsts, -1), sep = \"\\n\", ",
                "                remove = FALSE)",
                "        fft_facets <- idvl_g(fft_g, amps %>% group_by(participant, ",
                "            Hz) %>% summarise_all(mean) %>% gather(Flash_and_or_field, ",
                "            Power, -Hz, -samp_shuff, -c(!!!grouping_cnsts)) %>% ",
                "            ggplot(aes(Hz, Power, color = Flash_and_or_field))) + ",
                "            geom_line() + scale_x_continuous(name = \"Frequency (Hz)\", ",
                "            limits = c(0, xaxisvals), breaks = seq(0, xaxisvals, ",
                "                ifelse(xaxisvals > 10 | xaxisvals != xaxis_r, ",
                "                  1/max(Closest(xaxis_r/seq(fft_x, xaxis_r, fft_x), ",
                "                    5)/xaxis_r), fft_x))) + labs(caption = paste(\"Data from\", ",
                "            as.character(length(pcpts)), \"participants\")) + geom_text(data = as.data.frame(plot_label), ",
                "            inherit.aes = FALSE, size = 1.2, aes(label = lab, ",
                "                x = Inf, y = Inf), vjust = 1.15, hjust = 1.05)",
                "        side_by_side <- arrangeGrob(ts_facets, fft_facets, ncol = 2)",
                "        ggsave(file.path(\"plots\", \"Indvls_Plots.pdf\"), width = 25, ",
                "            side_by_side)",
                "    }",
                "    else if (display == \"Time-Series Across Participants\") {",
                "        (move_layers(cmbd_g(t_srs_g, 0) + theme(panel.grid = element_blank()) + ",
                "            geom_ribbon(alpha = 0.15, aes(color = NULL)), \"GeomRibbon\", ",
                "            position = \"bottom\")) %>% sv_cmbd_g",
                "    }",
                "    else {",
                "        set.seed(123)",
                "        fft_x <- 1/(length(unique(amps$Hz)) * samp_per)",
                "        shuffle <- function(x) {",
                "            cmbd_w %>% group_by(participant) %>% sample_n(length(CTIs), ",
                "                weight = CTI) %>% mutate_at(vars(CTI), list(~seq(min(CTIs), ",
                "                max(CTIs), samp_per))) %>% mutate(samp_shuff = x)",
                "        }",
                "        amps_shuff <- do.call(rbind, lapply(1:shuff, shuffle)) %>% ",
                "            amplitude(shuff) %>% group_by(Hz, samp_shuff) %>% ",
                "            summarise_at(vars(locations), mean) %>% group_by(Hz) %>% ",
                "            summarise_at(vars(locations), list(~quantile(., probs = 1 - ",
                "                pval))) %>% combine(amps %>% group_by(Hz) %>% ",
                "            summarise_at(vars(locations), mean), names = (c(\"Significance Cutoff\", ",
                "            \"Observed Data\"))) %>% gather(Location, Power, -c(Hz, ",
                "            source)) %>% right_join(gather(conf_int(amps, Hz), ",
                "            Location, Conf_Int, -Hz), by = c(\"Hz\", \"Location\"))",
                "        (move_layers(cmbd_g(fft_g, ggplot(amps_shuff, aes(Hz, ",
                "            Power, col = Location, linetype = source, ymin = Power - ",
                "                Conf_Int, ymax = Power + Conf_Int, fill = Location))) + ",
                "            scale_linetype_manual(values = c(\"solid\", \"dashed\")) + ",
                "            scale_x_continuous(name = \"Frequency (Hz)\", limits = c(0, ",
                "                xaxisvals), breaks = seq(0, xaxisvals, ifelse(fft_x > ",
                "                0.5, round(fft_x, 2), 1))) + labs(linetype = \"\", ",
                "            caption = paste(\"Significance threshold at p < \", ",
                "                as.character(pval))) + geom_ribbon(data = filter(amps_shuff, ",
                "            source == \"Observed Data\"), alpha = 0.15, aes(color = NULL)) + ",
                "            geom_point(size = 3, data = amps_shuff %>% spread(source, ",
                "                Power) %>% filter(`Observed Data` > `Significance Cutoff`) %>% ",
                "                select(-c(`Significance Cutoff`, Conf_Int)) %>% ",
                "                gather(source, Power, -Hz, -Location), aes(ymin = NULL, ",
                "                ymax = NULL)), \"GeomRibbon\", position = \"bottom\")) %>% ",
                "            sv_cmbd_g",
                "    }",
                "}"
            ]
        },
        {
            "id": "main_analysis_h3",
            "func": "main_function",
            "params": {
                "dset": "Pilot",
                "display": "FFT Across Participants",
                "ext_objects": 3,
                "iso_sides": false,
                "sbtr": false,
                "samp_per": 0.0167,
                "clumps": 2,
                "dep_var": "Accuracy",
                "pval": 0.025,
                "shuff": 50,
                "trends": [
                    "Detrending",
                    "Demeaning"
                ],
                "smooth_method": "Loess",
                "win_func": "Tukey",
                "xaxisvals": 15,
                "duration": 1,
                "attn_filter": false,
                "catch_floor": 0.85,
                "side_bias": 0.2,
                "pre_range": [0.45, 0.75],
                "post_range": [0.45, 0.75],
                "block_floor": 0.4,
                "miniblock_range": [0.4, 0.8],
                "CTI_range": [0.3, 1.29]
            },
            "code": [
                "function (dset, display, ext_objects, iso_sides, sbtr, samp_per, ",
                "    clumps, dep_var, pval, shuff, trends, smooth_method, win_func, ",
                "    xaxisvals, duration, attn_filter, catch_floor, side_bias, ",
                "    pre_range, post_range, block_floor, miniblock_range, CTI_range) ",
                "{",
                "    grouping_cnsts <- quos(participant, Trials_filtered_out, ",
                "        Acc_prefilter, Acc_postfilter, CatchAcc)",
                "    pcpts <- if (dset == \"Pilot\") {",
                "        blocksize <- 54",
                "        if (ext_objects == 2) ",
                "            301:324",
                "        else 401:427",
                "    }",
                "    else {",
                "        blocksize <- 80",
                "        if (ext_objects == 2) ",
                "            501:530",
                "        else 601:630",
                "    }",
                "    dep_var_abbr <- as.name(ifelse(dep_var == \"Accuracy\", \"Acc\", ",
                "        \"RT\"))",
                "    dem_df <- fread(file.path(\"data\", \"Demographics.csv\")) %>% ",
                "        mutate_at(vars(SubjID), as.numeric)",
                "    pcpts_combine <- function(pcpt) {",
                "        fread(file.path(\"data\", pcpt, paste0(pcpt, \".csv\"))) %>% ",
                "            filter(Trial > 0) %>% mutate(CatchAcc = mean(ifelse(Opacity > ",
                "            0, NA, Acc), na.rm = TRUE)) %>% group_by(CorrSide) %>% ",
                "            mutate(Side_Acc = mean(Acc, na.rm = TRUE)) %>% ungroup() %>% ",
                "            mutate(Side_Diff = max(Side_Acc) - min(Side_Acc)) %>% ",
                "            left_join(dem_df, by = c(participant = \"SubjID\")) %>% ",
                "            filter(CatchAcc >= catch_floor, grepl(ifelse(attn_filter, ",
                "                \"fully alert\", \"\"), Q9), Side_Diff <= side_bias, ",
                "                Opacity > 0) %>% mutate(Acc_prefilter = mean(Acc, ",
                "            na.rm = TRUE), CTI = RoundTo(RoundTo(lilsquareStartTime - ",
                "            flash_circleEndTime, 1/60), samp_per)) %>% filter(between(Acc_prefilter, ",
                "            pre_range[1], pre_range[2], incbounds = TRUE), between(CTI, ",
                "            min(CTI_range), max(CTI_range))) %>% mutate(block = RoundTo(Trial, ",
                "            blocksize, ceiling)/blocksize, RT = ifelse(Acc == ",
                "            1 & ButtonPressTime - lilsquareStartTime > 0.1, ButtonPressTime - ",
                "            lilsquareStartTime, NA), Stim_Sides = as.character(ifelse(CorrSide == ",
                "            FlashSide, \"Valid\", \"Invalid\")), CorrSide = case_when(CorrSide == ",
                "            1 ~ \"Right\", CorrSide == -1 ~ \"Left\", TRUE ~ \"Bottom\"), ",
                "            Stim_Sides = case_when(iso_sides ~ paste(CorrSide, ",
                "                Stim_Sides, sep = \"_\"), TRUE ~ Stim_Sides)) %>% ",
                "            group_by(block) %>% mutate(block_acc = mean(Acc)) %>% ",
                "            ungroup() %>% mutate(rown = row_number(), miniblock = RoundTo(rown, ",
                "            16, ceiling)/16) %>% group_by(miniblock) %>% mutate(miniblock_avg = mean(Acc)) %>% ",
                "            ungroup() %>% mutate_at(vars(Acc, RT), list(~ifelse(block_acc <= ",
                "            block_floor | !between(miniblock_avg, miniblock_range[1], ",
                "            miniblock_range[2]), NA, .))) %>% mutate(Trials_filtered_out = sum(is.na(Acc))/n(), ",
                "            Acc_postfilter = mean(Acc, na.rm = TRUE)) %>% filter(between(Acc_postfilter, ",
                "            post_range[1], post_range[2])) %>% group_by(CTI, ",
                "            Stim_Sides, !!!grouping_cnsts) %>% summarise_at(vars(Acc, ",
                "            RT), list(~mean(., na.rm = TRUE))) %>% arrange(CTI) %>% ",
                "            group_by(Stim_Sides) %>% mutate_at(vars(Acc, RT), ",
                "            list(~na.approx(., na.rm = FALSE, rule = 2))) %>% ",
                "            mutate_at(vars(Acc, RT), list(~rollapply(., clumps + ",
                "                1, mean, partial = TRUE)))",
                "    }",
                "    cmbd <- do.call(rbind, lapply(pcpts, pcpts_combine)) %>% ",
                "        arrange(Acc_prefilter, participant, Stim_Sides, CTI)",
                "    CTIs <- unique(cmbd$CTI)",
                "    if (win_func == \"Tukey\") {",
                "        win <- tukeywindow(length(CTIs), 0.5)",
                "    }",
                "    else {",
                "        win <- match.fun(paste0(tolower(win_func), \"window\"))(length(CTIs))",
                "    }",
                "    locations <- unique(cmbd$Stim_Sides)",
                "    pcpts <- unique(cmbd$participant)",
                "    cmbd_w <- cmbd %>% pivot_wider(CTI:CatchAcc, Stim_Sides, ",
                "        values_from = !!dep_var_abbr) %>% arrange(Acc_prefilter, ",
                "        participant, CTI) %>% group_by(participant) %>% mutate_at(vars(locations), ",
                "        list(~na.approx(., na.rm = FALSE, rule = 2)))",
                "    if (sbtr) {",
                "        s <- tail(1:ncol(cmbd_w), length(locations))[c(TRUE, ",
                "            FALSE)]",
                "        cmbd_w[paste0(names(cmbd_w[s]), \"_minus_\", names(cmbd_w)[s + ",
                "            1])] <- cmbd_w[s] - cmbd_w[s + 1]",
                "        locations = tail(colnames(cmbd_w), length(locations)/2)",
                "    }",
                "    conf_int <- function(x, ...) {",
                "        x %>% group_by_(.dots = lazy_dots(...)) %>% summarise_at(vars(locations), ",
                "            list(~qnorm(0.975) * std_err(.)))",
                "    }",
                "    amplitude <- function(x, y) {",
                "        pre_pad <- length(pcpts) * (length(unique(cmbd_w$CTI))) * ",
                "            y",
                "        x %>% group_by(participant) %>% mutate_at(vars(locations), ",
                "            list(~case_when(\"Detrending\" %in% trends ~ . - polyval(polyfit(CTI, ",
                "                ., 2), CTI), TRUE ~ .))) %>% mutate_at(vars(locations), ",
                "            list(~case_when(\"Demeaning\" %in% trends ~ . - mean(.), ",
                "                TRUE ~ .))) %>% mutate_at(vars(locations), list(~. * ",
                "            win/Norm(win))) %>% ungroup() %>% add_row(participant = rep(pcpts, ",
                "            y * (ceiling((duration - diff(range(cmbd_w$CTI)))/samp_per)))) %>% ",
                "            head(-length(pcpts) * y) %>% mutate_at(vars(locations), ",
                "            list(~coalesce(., 0))) %>% mutate(samp_shuff = ifelse(row_number() <= ",
                "            pre_pad, RoundTo(row_number(), pre_pad/y, ceiling)/(pre_pad/y), ",
                "            RoundTo(row_number() - pre_pad, (n() - pre_pad)/(y), ",
                "                ceiling)/((n() - pre_pad)/y))) %>% group_by(participant, ",
                "            samp_shuff) %>% mutate_at(vars(locations), list(~Mod(sqrt(2/n()) * ",
                "            fft(.))^2)) %>% mutate(Hz = (row_number() - 1)/(n() * ",
                "            samp_per)) %>% ungroup() %>% select(-CTI)",
                "    }",
                "    amps <- amplitude(cmbd_w, 1)",
                "    fft_x <- round(1/(length(unique(amps$Hz)) * samp_per), 1)",
                "    xaxis_r <- RoundTo(xaxisvals, fft_x)",
                "    t_srs_g <- function(x) {",
                "        cmbd_w %>% gather(Location, !!dep_var_abbr, -c(CTI, !!!grouping_cnsts)) %>% ",
                "            right_join(gather(conf_int(cmbd_w, CTI), Location, ",
                "                Conf_Int, -CTI), by = c(\"CTI\", \"Location\")) %>% ",
                "            group_by(CTI, Location, Conf_Int, !!!head(grouping_cnsts, ",
                "                x)) %>% summarise(`:=`(!!dep_var_abbr, mean(!!dep_var_abbr))) %>% ",
                "            ggplot(aes(CTI, !!dep_var_abbr, group = Location, ",
                "                color = Location, fill = Location, ymin = !!dep_var_abbr - ",
                "                  Conf_Int, ymax = !!dep_var_abbr + Conf_Int)) + ",
                "            labs(title = paste0(dep_var_abbr, \" by Cue-Target Interval \", ",
                "                ext_objects, \"-object Task\"), x = \"Cue-Target Interval (ms)\")",
                "    }",
                "    fft_g <- function(x) {",
                "        x + labs(title = paste0(\"FFT of Target \", dep_var, \", \", ",
                "            ext_objects, \"-object task\"), col = \"Target Location\", ",
                "            y = \"Spectral Power\") + theme(panel.grid.minor.x = element_blank(), ",
                "            panel.grid.major.y = element_blank())",
                "    }",
                "    viridis_cols <- 0.7 + RoundTo(1e-04 * RoundTo(length(locations), ",
                "        4, floor), 0.2, ceiling)",
                "    graph <- function(y, x) {",
                "        y(x) + theme_bw() + scale_color_viridis_d(option = \"C\", ",
                "            end = viridis_cols, labels = sapply(locations, simplify = TRUE, ",
                "                function(x) gsub(\"_\", \" \", x), USE.NAMES = FALSE)) + ",
                "            scale_fill_viridis_d(option = \"C\", end = viridis_cols) + ",
                "            guides(colour = guide_legend(reverse = TRUE), fill = FALSE)",
                "    }",
                "    idvl_g <- function(y, x) {",
                "        graph(y, x) + theme(plot.title = element_text(hjust = 0.5), ",
                "            plot.subtitle = element_text(hjust = 0.5)) + facet_wrap(~factor(participant, ",
                "            levels = pcpts), ncol = round(length(pcpts)/3), scales = \"free_x\")",
                "    }",
                "    cmbd_g <- function(y, x) {",
                "        graph(y, x) + geom_line(size = 1.5) + theme(legend.key.size = unit(0.55, ",
                "            \"in\")) + labs(subtitle = paste(\"Data from\", as.character(length(pcpts)), ",
                "            \"participants\"))",
                "    }",
                "    sv_cmbd_g <- function(x) {",
                "        x %>% ggsave(filename = file.path(\"plots\", paste(display, ",
                "            ext_objects, \"objects.pdf\")), width = xaxisvals)",
                "    }",
                "    if (display == \"prelim_table\") {",
                "        write.csv(cmbd, file.path(\"plots\", \"Prelim_table.csv\"))",
                "    }",
                "    else if (display == \"fft_table\") {",
                "        write.csv(amps, file.path(\"plots\", \"FFT_table.csv\"))",
                "    }",
                "    else if (display == \"Time-Series + FFT by Individual\") {",
                "        ts_facets <- idvl_g(t_srs_g, 1) + geom_line(alpha = I(2/10), ",
                "            color = \"grey\", show.legend = FALSE) + stat_smooth(method = tolower(smooth_method), ",
                "            span = 0.2, se = FALSE, size = 0.5, show.legend = FALSE)",
                "        plot_label <- amps %>% group_by(!!!grouping_cnsts) %>% ",
                "            summarise() %>% ungroup() %>% drop_na() %>% mutate_at(vars(!!!tail(grouping_cnsts, ",
                "            -1)), funs(paste(quo_name(quo(.)), \"=\", percent(.)))) %>% ",
                "            unite(lab, !!!tail(grouping_cnsts, -1), sep = \"\\n\", ",
                "                remove = FALSE)",
                "        fft_facets <- idvl_g(fft_g, amps %>% group_by(participant, ",
                "            Hz) %>% summarise_all(mean) %>% gather(Flash_and_or_field, ",
                "            Power, -Hz, -samp_shuff, -c(!!!grouping_cnsts)) %>% ",
                "            ggplot(aes(Hz, Power, color = Flash_and_or_field))) + ",
                "            geom_line() + scale_x_continuous(name = \"Frequency (Hz)\", ",
                "            limits = c(0, xaxisvals), breaks = seq(0, xaxisvals, ",
                "                ifelse(xaxisvals > 10 | xaxisvals != xaxis_r, ",
                "                  1/max(Closest(xaxis_r/seq(fft_x, xaxis_r, fft_x), ",
                "                    5)/xaxis_r), fft_x))) + labs(caption = paste(\"Data from\", ",
                "            as.character(length(pcpts)), \"participants\")) + geom_text(data = as.data.frame(plot_label), ",
                "            inherit.aes = FALSE, size = 1.2, aes(label = lab, ",
                "                x = Inf, y = Inf), vjust = 1.15, hjust = 1.05)",
                "        side_by_side <- arrangeGrob(ts_facets, fft_facets, ncol = 2)",
                "        ggsave(file.path(\"plots\", \"Indvls_Plots.pdf\"), width = 25, ",
                "            side_by_side)",
                "    }",
                "    else if (display == \"Time-Series Across Participants\") {",
                "        (move_layers(cmbd_g(t_srs_g, 0) + theme(panel.grid = element_blank()) + ",
                "            geom_ribbon(alpha = 0.15, aes(color = NULL)), \"GeomRibbon\", ",
                "            position = \"bottom\")) %>% sv_cmbd_g",
                "    }",
                "    else {",
                "        set.seed(123)",
                "        fft_x <- 1/(length(unique(amps$Hz)) * samp_per)",
                "        shuffle <- function(x) {",
                "            cmbd_w %>% group_by(participant) %>% sample_n(length(CTIs), ",
                "                weight = CTI) %>% mutate_at(vars(CTI), list(~seq(min(CTIs), ",
                "                max(CTIs), samp_per))) %>% mutate(samp_shuff = x)",
                "        }",
                "        amps_shuff <- do.call(rbind, lapply(1:shuff, shuffle)) %>% ",
                "            amplitude(shuff) %>% group_by(Hz, samp_shuff) %>% ",
                "            summarise_at(vars(locations), mean) %>% group_by(Hz) %>% ",
                "            summarise_at(vars(locations), list(~quantile(., probs = 1 - ",
                "                pval))) %>% combine(amps %>% group_by(Hz) %>% ",
                "            summarise_at(vars(locations), mean), names = (c(\"Significance Cutoff\", ",
                "            \"Observed Data\"))) %>% gather(Location, Power, -c(Hz, ",
                "            source)) %>% right_join(gather(conf_int(amps, Hz), ",
                "            Location, Conf_Int, -Hz), by = c(\"Hz\", \"Location\"))",
                "        (move_layers(cmbd_g(fft_g, ggplot(amps_shuff, aes(Hz, ",
                "            Power, col = Location, linetype = source, ymin = Power - ",
                "                Conf_Int, ymax = Power + Conf_Int, fill = Location))) + ",
                "            scale_linetype_manual(values = c(\"solid\", \"dashed\")) + ",
                "            scale_x_continuous(name = \"Frequency (Hz)\", limits = c(0, ",
                "                xaxisvals), breaks = seq(0, xaxisvals, ifelse(fft_x > ",
                "                0.5, round(fft_x, 2), 1))) + labs(linetype = \"\", ",
                "            caption = paste(\"Significance threshold at p < \", ",
                "                as.character(pval))) + geom_ribbon(data = filter(amps_shuff, ",
                "            source == \"Observed Data\"), alpha = 0.15, aes(color = NULL)) + ",
                "            geom_point(size = 3, data = amps_shuff %>% spread(source, ",
                "                Power) %>% filter(`Observed Data` > `Significance Cutoff`) %>% ",
                "                select(-c(`Significance Cutoff`, Conf_Int)) %>% ",
                "                gather(source, Power, -Hz, -Location), aes(ymin = NULL, ",
                "                ymax = NULL)), \"GeomRibbon\", position = \"bottom\")) %>% ",
                "            sv_cmbd_g",
                "    }",
                "}"
            ]
        },
        {
            "id": "main_analysis_h4",
            "func": "main_function",
            "params": {
                "dset": "Pilot",
                "display": "FFT Across Participants",
                "ext_objects": 3,
                "iso_sides": false,
                "sbtr": false,
                "samp_per": 0.0167,
                "clumps": 2,
                "dep_var": "Response Time",
                "pval": 0.025,
                "shuff": 50,
                "trends": [
                    "Detrending",
                    "Demeaning"
                ],
                "smooth_method": "Loess",
                "win_func": "Tukey",
                "xaxisvals": 15,
                "duration": 1,
                "attn_filter": false,
                "catch_floor": 0.85,
                "side_bias": 0.2,
                "pre_range": [0.45, 0.75],
                "post_range": [0.45, 0.75],
                "block_floor": 0.4,
                "miniblock_range": [0.4, 0.8],
                "CTI_range": [0.3, 1.29]
            },
            "code": [
                "function (dset, display, ext_objects, iso_sides, sbtr, samp_per, ",
                "    clumps, dep_var, pval, shuff, trends, smooth_method, win_func, ",
                "    xaxisvals, duration, attn_filter, catch_floor, side_bias, ",
                "    pre_range, post_range, block_floor, miniblock_range, CTI_range) ",
                "{",
                "    grouping_cnsts <- quos(participant, Trials_filtered_out, ",
                "        Acc_prefilter, Acc_postfilter, CatchAcc)",
                "    pcpts <- if (dset == \"Pilot\") {",
                "        blocksize <- 54",
                "        if (ext_objects == 2) ",
                "            301:324",
                "        else 401:427",
                "    }",
                "    else {",
                "        blocksize <- 80",
                "        if (ext_objects == 2) ",
                "            501:530",
                "        else 601:630",
                "    }",
                "    dep_var_abbr <- as.name(ifelse(dep_var == \"Accuracy\", \"Acc\", ",
                "        \"RT\"))",
                "    dem_df <- fread(file.path(\"data\", \"Demographics.csv\")) %>% ",
                "        mutate_at(vars(SubjID), as.numeric)",
                "    pcpts_combine <- function(pcpt) {",
                "        fread(file.path(\"data\", pcpt, paste0(pcpt, \".csv\"))) %>% ",
                "            filter(Trial > 0) %>% mutate(CatchAcc = mean(ifelse(Opacity > ",
                "            0, NA, Acc), na.rm = TRUE)) %>% group_by(CorrSide) %>% ",
                "            mutate(Side_Acc = mean(Acc, na.rm = TRUE)) %>% ungroup() %>% ",
                "            mutate(Side_Diff = max(Side_Acc) - min(Side_Acc)) %>% ",
                "            left_join(dem_df, by = c(participant = \"SubjID\")) %>% ",
                "            filter(CatchAcc >= catch_floor, grepl(ifelse(attn_filter, ",
                "                \"fully alert\", \"\"), Q9), Side_Diff <= side_bias, ",
                "                Opacity > 0) %>% mutate(Acc_prefilter = mean(Acc, ",
                "            na.rm = TRUE), CTI = RoundTo(RoundTo(lilsquareStartTime - ",
                "            flash_circleEndTime, 1/60), samp_per)) %>% filter(between(Acc_prefilter, ",
                "            pre_range[1], pre_range[2], incbounds = TRUE), between(CTI, ",
                "            min(CTI_range), max(CTI_range))) %>% mutate(block = RoundTo(Trial, ",
                "            blocksize, ceiling)/blocksize, RT = ifelse(Acc == ",
                "            1 & ButtonPressTime - lilsquareStartTime > 0.1, ButtonPressTime - ",
                "            lilsquareStartTime, NA), Stim_Sides = as.character(ifelse(CorrSide == ",
                "            FlashSide, \"Valid\", \"Invalid\")), CorrSide = case_when(CorrSide == ",
                "            1 ~ \"Right\", CorrSide == -1 ~ \"Left\", TRUE ~ \"Bottom\"), ",
                "            Stim_Sides = case_when(iso_sides ~ paste(CorrSide, ",
                "                Stim_Sides, sep = \"_\"), TRUE ~ Stim_Sides)) %>% ",
                "            group_by(block) %>% mutate(block_acc = mean(Acc)) %>% ",
                "            ungroup() %>% mutate(rown = row_number(), miniblock = RoundTo(rown, ",
                "            16, ceiling)/16) %>% group_by(miniblock) %>% mutate(miniblock_avg = mean(Acc)) %>% ",
                "            ungroup() %>% mutate_at(vars(Acc, RT), list(~ifelse(block_acc <= ",
                "            block_floor | !between(miniblock_avg, miniblock_range[1], ",
                "            miniblock_range[2]), NA, .))) %>% mutate(Trials_filtered_out = sum(is.na(Acc))/n(), ",
                "            Acc_postfilter = mean(Acc, na.rm = TRUE)) %>% filter(between(Acc_postfilter, ",
                "            post_range[1], post_range[2])) %>% group_by(CTI, ",
                "            Stim_Sides, !!!grouping_cnsts) %>% summarise_at(vars(Acc, ",
                "            RT), list(~mean(., na.rm = TRUE))) %>% arrange(CTI) %>% ",
                "            group_by(Stim_Sides) %>% mutate_at(vars(Acc, RT), ",
                "            list(~na.approx(., na.rm = FALSE, rule = 2))) %>% ",
                "            mutate_at(vars(Acc, RT), list(~rollapply(., clumps + ",
                "                1, mean, partial = TRUE)))",
                "    }",
                "    cmbd <- do.call(rbind, lapply(pcpts, pcpts_combine)) %>% ",
                "        arrange(Acc_prefilter, participant, Stim_Sides, CTI)",
                "    CTIs <- unique(cmbd$CTI)",
                "    if (win_func == \"Tukey\") {",
                "        win <- tukeywindow(length(CTIs), 0.5)",
                "    }",
                "    else {",
                "        win <- match.fun(paste0(tolower(win_func), \"window\"))(length(CTIs))",
                "    }",
                "    locations <- unique(cmbd$Stim_Sides)",
                "    pcpts <- unique(cmbd$participant)",
                "    cmbd_w <- cmbd %>% pivot_wider(CTI:CatchAcc, Stim_Sides, ",
                "        values_from = !!dep_var_abbr) %>% arrange(Acc_prefilter, ",
                "        participant, CTI) %>% group_by(participant) %>% mutate_at(vars(locations), ",
                "        list(~na.approx(., na.rm = FALSE, rule = 2)))",
                "    if (sbtr) {",
                "        s <- tail(1:ncol(cmbd_w), length(locations))[c(TRUE, ",
                "            FALSE)]",
                "        cmbd_w[paste0(names(cmbd_w[s]), \"_minus_\", names(cmbd_w)[s + ",
                "            1])] <- cmbd_w[s] - cmbd_w[s + 1]",
                "        locations = tail(colnames(cmbd_w), length(locations)/2)",
                "    }",
                "    conf_int <- function(x, ...) {",
                "        x %>% group_by_(.dots = lazy_dots(...)) %>% summarise_at(vars(locations), ",
                "            list(~qnorm(0.975) * std_err(.)))",
                "    }",
                "    amplitude <- function(x, y) {",
                "        pre_pad <- length(pcpts) * (length(unique(cmbd_w$CTI))) * ",
                "            y",
                "        x %>% group_by(participant) %>% mutate_at(vars(locations), ",
                "            list(~case_when(\"Detrending\" %in% trends ~ . - polyval(polyfit(CTI, ",
                "                ., 2), CTI), TRUE ~ .))) %>% mutate_at(vars(locations), ",
                "            list(~case_when(\"Demeaning\" %in% trends ~ . - mean(.), ",
                "                TRUE ~ .))) %>% mutate_at(vars(locations), list(~. * ",
                "            win/Norm(win))) %>% ungroup() %>% add_row(participant = rep(pcpts, ",
                "            y * (ceiling((duration - diff(range(cmbd_w$CTI)))/samp_per)))) %>% ",
                "            head(-length(pcpts) * y) %>% mutate_at(vars(locations), ",
                "            list(~coalesce(., 0))) %>% mutate(samp_shuff = ifelse(row_number() <= ",
                "            pre_pad, RoundTo(row_number(), pre_pad/y, ceiling)/(pre_pad/y), ",
                "            RoundTo(row_number() - pre_pad, (n() - pre_pad)/(y), ",
                "                ceiling)/((n() - pre_pad)/y))) %>% group_by(participant, ",
                "            samp_shuff) %>% mutate_at(vars(locations), list(~Mod(sqrt(2/n()) * ",
                "            fft(.))^2)) %>% mutate(Hz = (row_number() - 1)/(n() * ",
                "            samp_per)) %>% ungroup() %>% select(-CTI)",
                "    }",
                "    amps <- amplitude(cmbd_w, 1)",
                "    fft_x <- round(1/(length(unique(amps$Hz)) * samp_per), 1)",
                "    xaxis_r <- RoundTo(xaxisvals, fft_x)",
                "    t_srs_g <- function(x) {",
                "        cmbd_w %>% gather(Location, !!dep_var_abbr, -c(CTI, !!!grouping_cnsts)) %>% ",
                "            right_join(gather(conf_int(cmbd_w, CTI), Location, ",
                "                Conf_Int, -CTI), by = c(\"CTI\", \"Location\")) %>% ",
                "            group_by(CTI, Location, Conf_Int, !!!head(grouping_cnsts, ",
                "                x)) %>% summarise(`:=`(!!dep_var_abbr, mean(!!dep_var_abbr))) %>% ",
                "            ggplot(aes(CTI, !!dep_var_abbr, group = Location, ",
                "                color = Location, fill = Location, ymin = !!dep_var_abbr - ",
                "                  Conf_Int, ymax = !!dep_var_abbr + Conf_Int)) + ",
                "            labs(title = paste0(dep_var_abbr, \" by Cue-Target Interval \", ",
                "                ext_objects, \"-object Task\"), x = \"Cue-Target Interval (ms)\")",
                "    }",
                "    fft_g <- function(x) {",
                "        x + labs(title = paste0(\"FFT of Target \", dep_var, \", \", ",
                "            ext_objects, \"-object task\"), col = \"Target Location\", ",
                "            y = \"Spectral Power\") + theme(panel.grid.minor.x = element_blank(), ",
                "            panel.grid.major.y = element_blank())",
                "    }",
                "    viridis_cols <- 0.7 + RoundTo(1e-04 * RoundTo(length(locations), ",
                "        4, floor), 0.2, ceiling)",
                "    graph <- function(y, x) {",
                "        y(x) + theme_bw() + scale_color_viridis_d(option = \"C\", ",
                "            end = viridis_cols, labels = sapply(locations, simplify = TRUE, ",
                "                function(x) gsub(\"_\", \" \", x), USE.NAMES = FALSE)) + ",
                "            scale_fill_viridis_d(option = \"C\", end = viridis_cols) + ",
                "            guides(colour = guide_legend(reverse = TRUE), fill = FALSE)",
                "    }",
                "    idvl_g <- function(y, x) {",
                "        graph(y, x) + theme(plot.title = element_text(hjust = 0.5), ",
                "            plot.subtitle = element_text(hjust = 0.5)) + facet_wrap(~factor(participant, ",
                "            levels = pcpts), ncol = round(length(pcpts)/3), scales = \"free_x\")",
                "    }",
                "    cmbd_g <- function(y, x) {",
                "        graph(y, x) + geom_line(size = 1.5) + theme(legend.key.size = unit(0.55, ",
                "            \"in\")) + labs(subtitle = paste(\"Data from\", as.character(length(pcpts)), ",
                "            \"participants\"))",
                "    }",
                "    sv_cmbd_g <- function(x) {",
                "        x %>% ggsave(filename = file.path(\"plots\", paste(display, ",
                "            ext_objects, \"objects.pdf\")), width = xaxisvals)",
                "    }",
                "    if (display == \"prelim_table\") {",
                "        write.csv(cmbd, file.path(\"plots\", \"Prelim_table.csv\"))",
                "    }",
                "    else if (display == \"fft_table\") {",
                "        write.csv(amps, file.path(\"plots\", \"FFT_table.csv\"))",
                "    }",
                "    else if (display == \"Time-Series + FFT by Individual\") {",
                "        ts_facets <- idvl_g(t_srs_g, 1) + geom_line(alpha = I(2/10), ",
                "            color = \"grey\", show.legend = FALSE) + stat_smooth(method = tolower(smooth_method), ",
                "            span = 0.2, se = FALSE, size = 0.5, show.legend = FALSE)",
                "        plot_label <- amps %>% group_by(!!!grouping_cnsts) %>% ",
                "            summarise() %>% ungroup() %>% drop_na() %>% mutate_at(vars(!!!tail(grouping_cnsts, ",
                "            -1)), funs(paste(quo_name(quo(.)), \"=\", percent(.)))) %>% ",
                "            unite(lab, !!!tail(grouping_cnsts, -1), sep = \"\\n\", ",
                "                remove = FALSE)",
                "        fft_facets <- idvl_g(fft_g, amps %>% group_by(participant, ",
                "            Hz) %>% summarise_all(mean) %>% gather(Flash_and_or_field, ",
                "            Power, -Hz, -samp_shuff, -c(!!!grouping_cnsts)) %>% ",
                "            ggplot(aes(Hz, Power, color = Flash_and_or_field))) + ",
                "            geom_line() + scale_x_continuous(name = \"Frequency (Hz)\", ",
                "            limits = c(0, xaxisvals), breaks = seq(0, xaxisvals, ",
                "                ifelse(xaxisvals > 10 | xaxisvals != xaxis_r, ",
                "                  1/max(Closest(xaxis_r/seq(fft_x, xaxis_r, fft_x), ",
                "                    5)/xaxis_r), fft_x))) + labs(caption = paste(\"Data from\", ",
                "            as.character(length(pcpts)), \"participants\")) + geom_text(data = as.data.frame(plot_label), ",
                "            inherit.aes = FALSE, size = 1.2, aes(label = lab, ",
                "                x = Inf, y = Inf), vjust = 1.15, hjust = 1.05)",
                "        side_by_side <- arrangeGrob(ts_facets, fft_facets, ncol = 2)",
                "        ggsave(file.path(\"plots\", \"Indvls_Plots.pdf\"), width = 25, ",
                "            side_by_side)",
                "    }",
                "    else if (display == \"Time-Series Across Participants\") {",
                "        (move_layers(cmbd_g(t_srs_g, 0) + theme(panel.grid = element_blank()) + ",
                "            geom_ribbon(alpha = 0.15, aes(color = NULL)), \"GeomRibbon\", ",
                "            position = \"bottom\")) %>% sv_cmbd_g",
                "    }",
                "    else {",
                "        set.seed(123)",
                "        fft_x <- 1/(length(unique(amps$Hz)) * samp_per)",
                "        shuffle <- function(x) {",
                "            cmbd_w %>% group_by(participant) %>% sample_n(length(CTIs), ",
                "                weight = CTI) %>% mutate_at(vars(CTI), list(~seq(min(CTIs), ",
                "                max(CTIs), samp_per))) %>% mutate(samp_shuff = x)",
                "        }",
                "        amps_shuff <- do.call(rbind, lapply(1:shuff, shuffle)) %>% ",
                "            amplitude(shuff) %>% group_by(Hz, samp_shuff) %>% ",
                "            summarise_at(vars(locations), mean) %>% group_by(Hz) %>% ",
                "            summarise_at(vars(locations), list(~quantile(., probs = 1 - ",
                "                pval))) %>% combine(amps %>% group_by(Hz) %>% ",
                "            summarise_at(vars(locations), mean), names = (c(\"Significance Cutoff\", ",
                "            \"Observed Data\"))) %>% gather(Location, Power, -c(Hz, ",
                "            source)) %>% right_join(gather(conf_int(amps, Hz), ",
                "            Location, Conf_Int, -Hz), by = c(\"Hz\", \"Location\"))",
                "        (move_layers(cmbd_g(fft_g, ggplot(amps_shuff, aes(Hz, ",
                "            Power, col = Location, linetype = source, ymin = Power - ",
                "                Conf_Int, ymax = Power + Conf_Int, fill = Location))) + ",
                "            scale_linetype_manual(values = c(\"solid\", \"dashed\")) + ",
                "            scale_x_continuous(name = \"Frequency (Hz)\", limits = c(0, ",
                "                xaxisvals), breaks = seq(0, xaxisvals, ifelse(fft_x > ",
                "                0.5, round(fft_x, 2), 1))) + labs(linetype = \"\", ",
                "            caption = paste(\"Significance threshold at p < \", ",
                "                as.character(pval))) + geom_ribbon(data = filter(amps_shuff, ",
                "            source == \"Observed Data\"), alpha = 0.15, aes(color = NULL)) + ",
                "            geom_point(size = 3, data = amps_shuff %>% spread(source, ",
                "                Power) %>% filter(`Observed Data` > `Significance Cutoff`) %>% ",
                "                select(-c(`Significance Cutoff`, Conf_Int)) %>% ",
                "                gather(source, Power, -Hz, -Location), aes(ymin = NULL, ",
                "                ymax = NULL)), \"GeomRibbon\", position = \"bottom\")) %>% ",
                "            sv_cmbd_g",
                "    }",
                "}"
            ]
        }
    ]
}

